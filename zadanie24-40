//24
using System;
using System.Collections.Generic;

class ReceiptGenerator
{
    static void Main()
    {
        // Список покупок и их стоимости
        var purchases = new Dictionary<string, decimal>
        {
            { "Хлеб", 50.00m },
            { "Молоко", 60.00m },
            { "Яблоки", 120.00m },
            { "Мясо", 250.00m }
        };

        // Вывод чека
        PrintReceipt(purchases);
    }

    static void PrintReceipt(Dictionary<string, decimal> purchases)
    {
        Console.WriteLine("ЧЕК\n");
        Console.WriteLine("Наименование\tЦена");
        Console.WriteLine("---------------------");

        decimal total = 0;
        foreach (var item in purchases)
        {
            Console.WriteLine($"{item.Key}\t{item.Value:C}");
            total += item.Value;
        }

        decimal vatRate = 0.20m; // 20% НДС
        decimal vat = total * vatRate;
        decimal totalWithVat = total + vat;

        Console.WriteLine("---------------------");
        Console.WriteLine($"Итого:\t\t{total:C}");
        Console.WriteLine($"НДС (20%):\t{vat:C}");
        Console.WriteLine($"Итого с НДС:\t{totalWithVat:C}");
    }
}

//25
using System;
using System.Collections.Generic;
using System.Linq;

class WordFrequencyAnalyzer
{
    static void Main()
    {
        Console.WriteLine("Введите текст для анализа:");
        string inputText = Console.ReadLine();

        if (string.IsNullOrWhiteSpace(inputText))
        {
            Console.WriteLine("Текст не может быть пустым.");
            return;
        }

        var wordFrequencies = AnalyzeText(inputText);

        Console.WriteLine("\nСтатистика по частоте использования слов:");
        foreach (var entry in wordFrequencies.OrderByDescending(e => e.Value))
        {
            Console.WriteLine($"{entry.Key}: {entry.Value} раз(а)");
        }
    }

    static Dictionary<string, int> AnalyzeText(string text)
    {
        var wordCounts = new Dictionary<string, int>();

        // Удаление пунктуации и перевод текста в нижний регистр
        var cleanedText = new string(text
            .Where(c => !char.IsPunctuation(c))
            .ToArray())
            .ToLower();

        // Разделение текста на слова
        var words = cleanedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);

        foreach (var word in words)
        {
            if (wordCounts.ContainsKey(word))
            {
                wordCounts[word]++;
            }
            else
            {
                wordCounts[word] = 1;
            }
        }

        return wordCounts;
    }
}

//26
using System;

class TimeCalculator
{
    static void Main()
    {
        Console.WriteLine("Калькулятор времени");

        // Ввод первого временного интервала
        Console.Write("Введите первый интервал (часы минуты): ");
        var time1 = ReadTime();

        // Ввод второго временного интервала
        Console.Write("Введите второй интервал (часы минуты): ");
        var time2 = ReadTime();

        // Ввод операции
        Console.Write("Введите операцию (+ для сложения, - для вычитания): ");
        char operation = Console.ReadKey().KeyChar;
        Console.WriteLine();

        // Выполнение операции и вывод результата
        TimeSpan result;
        switch (operation)
        {
            case '+':
                result = time1 + time2;
                break;
            case '-':
                result = time1 - time2;
                break;
            default:
                Console.WriteLine("Недопустимая операция.");
                return;
        }

        Console.WriteLine($"Результат: {result.Hours} часов {result.Minutes} минут");
    }

    static TimeSpan ReadTime()
    {
        while (true)
        {
            try
            {
                var input = Console.ReadLine();
                var parts = input.Split(' ');

                if (parts.Length != 2)
                {
                    throw new FormatException();
                }

                int hours = int.Parse(parts[0]);
                int minutes = int.Parse(parts[1]);

                if (hours < 0 || minutes < 0 || minutes >= 60)
                {
                    throw new ArgumentOutOfRangeException();
                }

                return new TimeSpan(hours, minutes, 0);
            }
            catch
            {
                Console.WriteLine("Неверный формат. Пожалуйста, введите время в формате 'часы минуты':");
            }
        }
    }
}

//27
using System;

class QuadraticEquationSolver
{
    static void Main()
    {
        Console.WriteLine("Решение квадратного уравнения вида ax^2 + bx + c = 0");

        // Ввод коэффициентов
        double a = ReadCoefficient("Введите коэффициент a: ");
        double b = ReadCoefficient("Введите коэффициент b: ");
        double c = ReadCoefficient("Введите коэффициент c: ");

        // Вычисление дискриминанта
        double discriminant = b * b - 4 * a * c;

        // Определение корней уравнения
        if (discriminant > 0)
        {
            // Два различных корня
            double root1 = (-b + Math.Sqrt(discriminant)) / (2 * a);
            double root2 = (-b - Math.Sqrt(discriminant)) / (2 * a);
            Console.WriteLine($"Корни уравнения: x1 = {root1}, x2 = {root2}");
        }
        else if (discriminant == 0)
        {
            // Один корень
            double root = -b / (2 * a);
            Console.WriteLine($"Единственный корень уравнения: x = {root}");
        }
        else
        {
            // Нет действительных корней
            Console.WriteLine("Уравнение не имеет действительных корней.");
        }
    }

    static double ReadCoefficient(string prompt)
    {
        while (true)
        {
            Console.Write(prompt);
            string input = Console.ReadLine();
            if (double.TryParse(input, out double result))
            {
                return result;
            }
            Console.WriteLine("Некорректный ввод. Пожалуйста, введите числовое значение.");
        }
    }
}

//28
using System;

class LinearSystemSolver
{
    static void Main()
    {
        Console.WriteLine("Решение системы линейных уравнений с двумя переменными:");

        // Ввод коэффициентов уравнений
        double a1 = ReadCoefficient("Введите a1: ");
        double b1 = ReadCoefficient("Введите b1: ");
        double c1 = ReadCoefficient("Введите c1: ");
        double a2 = ReadCoefficient("Введите a2: ");
        double b2 = ReadCoefficient("Введите b2: ");
        double c2 = ReadCoefficient("Введите c2: ");

        // Вычисление детерминантов
        double D = a1 * b2 - a2 * b1;
        double Dx = c1 * b2 - c2 * b1;
        double Dy = a1 * c2 - a2 * c1;

        if (D == 0)
        {
            if (Dx == 0 && Dy == 0)
            {
                Console.WriteLine("Система уравнений имеет бесконечно много решений.");
            }
            else
            {
                Console.WriteLine("Система уравнений не имеет решений.");
            }
        }
        else
        {
            // Вычисление значений переменных
            double x = Dx / D;
            double y = Dy / D;

            Console.WriteLine($"Решение системы: x = {x}, y = {y}");
        }
    }

    static double ReadCoefficient(string prompt)
    {
        while (true)
        {
            Console.Write(prompt);
            string input = Console.ReadLine();
            if (double.TryParse(input, out double result))
            {
                return result;
            }
            Console.WriteLine("Некорректный ввод. Пожалуйста, введите числовое значение.");
        }
    }
}

//29
using System;
using System.IO;

class DiskMonitor
{
    static void Main()
    {
        Console.WriteLine("Информация о дисках на компьютере:");

        // Получение списка всех дисков
        DriveInfo[] drives = DriveInfo.GetDrives();

        foreach (DriveInfo drive in drives)
        {
            // Проверяем, является ли диск доступным
            if (drive.IsReady)
            {
                // Вывод информации о диске
                Console.WriteLine($"Диск: {drive.Name}");
                Console.WriteLine($"Тип: {drive.DriveType}");
                Console.WriteLine($"Файловая система: {drive.DriveFormat}");
                Console.WriteLine($"Общий размер: {FormatBytes(drive.TotalSize)}");
                Console.WriteLine($"Свободное место: {FormatBytes(drive.AvailableFreeSpace)}");
                Console.WriteLine($"Используемое место: {FormatBytes(drive.TotalSize - drive.AvailableFreeSpace)}");
                Console.WriteLine($"Метка тома: {drive.VolumeLabel}");
                Console.WriteLine();
            }
            else
            {
                Console.WriteLine($"Диск {drive.Name} недоступен.");
                Console.WriteLine();
            }
        }
    }

    // Метод для форматирования размера в человекочитаемый вид
    static string FormatBytes(long bytes)
    {
        const long KB = 1024;
        const long MB = KB * 1024;
        const long GB = MB * 1024;
        const long TB = GB * 1024;

        if (bytes >= TB)
            return $"{bytes / (double)TB:0.##} TB";
        if (bytes >= GB)
            return $"{bytes / (double)GB:0.##} GB";
        if (bytes >= MB)
            return $"{bytes / (double)MB:0.##} MB";
        if (bytes >= KB)
            return $"{bytes / (double)KB:0.##} KB";
        return $"{bytes} Bytes";
    }
}

//30
using System;
using System.IO;

class FileManager
{
    static void Main()
    {
        Console.WriteLine("Файловый менеджер");
        while (true)
        {
            Console.WriteLine("\nВыберите операцию:");
            Console.WriteLine("1. Создать файл");
            Console.WriteLine("2. Удалить файл");
            Console.WriteLine("3. Копировать файл");
            Console.WriteLine("4. Переместить файл");
            Console.WriteLine("5. Выход");

            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    CreateFile();
                    break;
                case "2":
                    DeleteFile();
                    break;
                case "3":
                    CopyFile();
                    break;
                case "4":
                    MoveFile();
                    break;
                case "5":
                    return; // Выход из приложения
                default:
                    Console.WriteLine("Неверный выбор, попробуйте снова.");
                    break;
            }
        }
    }

    static void CreateFile()
    {
        Console.Write("Введите путь к файлу для создания: ");
        string path = Console.ReadLine();
        try
        {
            using (var stream = File.Create(path))
            {
                Console.WriteLine($"Файл создан: {path}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }

    static void DeleteFile()
    {
        Console.Write("Введите путь к файлу для удаления: ");
        string path = Console.ReadLine();
        try
        {
            if (File.Exists(path))
            {
                File.Delete(path);
                Console.WriteLine($"Файл удален: {path}");
            }
            else
            {
                Console.WriteLine("Файл не найден.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }

    static void CopyFile()
    {
        Console.Write("Введите путь к исходному файлу: ");
        string sourcePath = Console.ReadLine();
        Console.Write("Введите путь к целевому файлу: ");
        string destPath = Console.ReadLine();
        try
        {
            if (File.Exists(sourcePath))
            {
                File.Copy(sourcePath, destPath, true); // true для перезаписи
                Console.WriteLine($"Файл скопирован из {sourcePath} в {destPath}");
            }
            else
            {
                Console.WriteLine("Исходный файл не найден.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }

    static void MoveFile()
    {
        Console.Write("Введите путь к исходному файлу: ");
        string sourcePath = Console.ReadLine();
        Console.Write("Введите путь к целевому файлу: ");
        string destPath = Console.ReadLine();
        try
        {
            if (File.Exists(sourcePath))
            {
                File.Move(sourcePath, destPath);
                Console.WriteLine($"Файл перемещен из {sourcePath} в {destPath}");
            }
            else
            {
                Console.WriteLine("Исходный файл не найден.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }
}

//31
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

class Program
{
    static void Main()
    {
        string filePath = "data.json"; // Укажите путь к вашему JSON-файлу

        if (File.Exists(filePath))
        {
            try
            {
                // Чтение JSON-файла
                string jsonData = File.ReadAllText(filePath);

                // Десериализация JSON в список объектов
                List<Person> people = JsonSerializer.Deserialize<List<Person>>(jsonData);

                // Вывод данных в формате таблицы
                Console.WriteLine("{0,-5} {1,-15} {2,-5}", "Id", "Name", "Age");
                Console.WriteLine(new string('-', 30));

                foreach (var person in people)
                {
                    Console.WriteLine("{0,-5} {1,-15} {2,-5}", person.Id, person.Name, person.Age);
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Ошибка чтения JSON: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Файл не найден.");
        }
    }
}

// Класс для представления данных из JSON
class Person
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}

//32
using System;
using System.Collections.Generic;
using System.Xml.Linq;

class Program
{
    static void Main()
    {
        string filePath = "data.xml"; // Укажите путь к вашему XML-файлу

        if (System.IO.File.Exists(filePath))
        {
            try
            {
                // Загрузка XML-файла
                XElement root = XElement.Load(filePath);

                // Извлечение данных из XML
                var people = new List<Person>();
                foreach (var element in root.Elements("Person"))
                {
                    var person = new Person
                    {
                        Id = int.Parse(element.Element("Id").Value),
                        Name = element.Element("Name").Value,
                        Age = int.Parse(element.Element("Age").Value)
                    };
                    people.Add(person);
                }

                // Вывод данных в формате таблицы
                Console.WriteLine("{0,-5} {1,-15} {2,-5}", "Id", "Name", "Age");
                Console.WriteLine(new string('-', 30));

                foreach (var person in people)
                {
                    Console.WriteLine("{0,-5} {1,-15} {2,-5}", person.Id, person.Name, person.Age);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Файл не найден.");
        }
    }
}

// Класс для представления данных из XML
class Person
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}

//33
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main()
    {
        List<Task> tasks = new List<Task>();
        string command;

        do
        {
            Console.Clear();
            Console.WriteLine("Список дел:");
            DisplayTasks(tasks);

            Console.WriteLine("\nКоманды:");
            Console.WriteLine("1 - Добавить задачу");
            Console.WriteLine("2 - Удалить задачу");
            Console.WriteLine("3 - Отметить задачу как выполненную");
            Console.WriteLine("4 - Выход");

            Console.Write("\nВведите команду: ");
            command = Console.ReadLine();

            switch (command)
            {
                case "1":
                    AddTask(tasks);
                    break;
                case "2":
                    RemoveTask(tasks);
                    break;
                case "3":
                    MarkTaskAsCompleted(tasks);
                    break;
            }
        }
        while (command != "4");
    }

    static void DisplayTasks(List<Task> tasks)
    {
        foreach (var task in tasks)
        {
            Console.WriteLine($"{task.Id}. {(task.IsCompleted ? "[Выполнено] " : "[Не выполнено] ")}{task.Description}");
        }
    }

    static void AddTask(List<Task> tasks)
    {
        Console.Write("Введите описание задачи: ");
        string description = Console.ReadLine();

        int newId = tasks.Count > 0 ? tasks.Max(t => t.Id) + 1 : 1;
        tasks.Add(new Task { Id = newId, Description = description, IsCompleted = false });

        Console.WriteLine("Задача добавлена. Нажмите любую клавишу для продолжения...");
        Console.ReadKey();
    }

    static void RemoveTask(List<Task> tasks)
    {
        Console.Write("Введите ID задачи для удаления: ");
        if (int.TryParse(Console.ReadLine(), out int id))
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            {
                tasks.Remove(task);
                Console.WriteLine("Задача удалена. Нажмите любую клавишу для продолжения...");
            }
            else
            {
                Console.WriteLine("Задача с указанным ID не найдена. Нажмите любую клавишу для продолжения...");
            }
        }
        else
        {
            Console.WriteLine("Некорректный ввод ID. Нажмите любую клавишу для продолжения...");
        }
        Console.ReadKey();
    }

    static void MarkTaskAsCompleted(List<Task> tasks)
    {
        Console.Write("Введите ID задачи для отметки как выполненной: ");
        if (int.TryParse(Console.ReadLine(), out int id))
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            {
                task.IsCompleted = true;
                Console.WriteLine("Задача отмечена как выполненная. Нажмите любую клавишу для продолжения...");
            }
            else
            {
                Console.WriteLine("Задача с указанным ID не найдена. Нажмите любую клавишу для продолжения...");
            }
        }
        else
        {
            Console.WriteLine("Некорректный ввод ID. Нажмите любую клавишу для продолжения...");
        }
        Console.ReadKey();
    }
}

// Класс для представления задачи
class Task
{
    public int Id { get; set; }
    public string Description { get; set; }
    public bool IsCompleted { get; set; }
}

//34
using System;
using System.IO;

class Program
{
    static void Main()
    {
        Console.Write("Введите путь к входному файлу: ");
        string inputFilePath = Console.ReadLine();

        Console.Write("Введите путь к выходному файлу: ");
        string outputFilePath = Console.ReadLine();

        try
        {
            // Чтение текста из входного файла
            string text = File.ReadAllText(inputFilePath);

            // Изменение регистра букв
            string modifiedText = ChangeCase(text);

            // Запись измененного текста в выходной файл
            File.WriteAllText(outputFilePath, modifiedText);

            Console.WriteLine("Файл успешно обработан. Нажмите любую клавишу для завершения...");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Произошла ошибка: {ex.Message}");
        }

        Console.ReadKey();
    }

    static string ChangeCase(string text)
    {
        char[] buffer = text.ToCharArray();
        for (int i = 0; i < buffer.Length; i++)
        {
            char c = buffer[i];
            if (char.IsLower(c))
            {
                buffer[i] = char.ToUpper(c);
            }
            else if (char.IsUpper(c))
            {
                buffer[i] = char.ToLower(c);
            }
        }
        return new string(buffer);
    }
}

//35
using System;
using System.Collections.Generic;
using System.Globalization;

class Program
{
    static void Main()
    {
        // Создание словаря для хранения заметок
        Dictionary<DateTime, string> notes = new Dictionary<DateTime, string>();

        while (true)
        {
            // Вывод календаря текущего месяца
            DisplayCalendar(DateTime.Now);

            Console.WriteLine("\nКоманды:");
            Console.WriteLine("1 - Добавить заметку");
            Console.WriteLine("2 - Просмотреть заметки");
            Console.WriteLine("3 - Выход");

            Console.Write("\nВведите команду: ");
            string command = Console.ReadLine();

            switch (command)
            {
                case "1":
                    AddNote(notes);
                    break;
                case "2":
                    ViewNotes(notes);
                    break;
                case "3":
                    return;
                default:
                    Console.WriteLine("Некорректная команда. Попробуйте снова.");
                    break;
            }
        }
    }

    static void DisplayCalendar(DateTime date)
    {
        Console.Clear();
        Console.WriteLine("Календарь на " + date.ToString("MMMM yyyy", CultureInfo.InvariantCulture));

        int daysInMonth = DateTime.DaysInMonth(date.Year, date.Month);
        DateTime firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
        int startDay = (int)firstDayOfMonth.DayOfWeek;

        // Вывод заголовка дней недели
        Console.WriteLine("Вс Пн Вт Ср Чт Пт Сб Вс");

        // Печать пустых ячеек для выравнивания
        for (int i = 0; i < startDay; i++)
        {
            Console.Write("   ");
        }

        // Печать дней месяца
        for (int day = 1; day <= daysInMonth; day++)
        {
            Console.Write(day.ToString("D2") + " ");
            if ((startDay + day) % 7 == 0)
            {
                Console.WriteLine();
            }
        }
        Console.WriteLine();
    }

    static void AddNote(Dictionary<DateTime, string> notes)
    {
        Console.Write("Введите дату для заметки (дд.мм.гггг): ");
        if (DateTime.TryParseExact(Console.ReadLine(), "dd.MM.yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime date))
        {
            Console.Write("Введите текст заметки: ");
            string note = Console.ReadLine();
            notes[date] = note;
            Console.WriteLine("Заметка добавлена.");
        }
        else
        {
            Console.WriteLine("Некорректный формат даты.");
        }
    }

    static void ViewNotes(Dictionary<DateTime, string> notes)
    {
        Console.Write("Введите дату для просмотра заметок (дд.мм.гггг): ");
        if (DateTime.TryParseExact(Console.ReadLine(), "dd.MM.yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime date))
        {
            if (notes.TryGetValue(date, out string note))
            {
                Console.WriteLine($"Заметка на {date.ToShortDateString()}: {note}");
            }
            else
            {
                Console.WriteLine("Заметок на эту дату нет.");
            }
        }
        else
        {
            Console.WriteLine("Некорректный формат даты.");
        }
    }
}

//36
using System;
using System.Collections.Generic;
using System.Linq;

namespace StudentPerformanceSystem
{
    // Класс для хранения информации о студенте
    class Student
    {
        public string Name { get; set; }
        public Dictionary<string, List<int>> Grades { get; set; } = new Dictionary<string, List<int>>();

        public void AddGrade(string subject, int grade)
        {
            if (!Grades.ContainsKey(subject))
            {
                Grades[subject] = new List<int>();
            }
            Grades[subject].Add(grade);
        }

        public double GetAverageGrade(string subject)
        {
            if (Grades.ContainsKey(subject) && Grades[subject].Count > 0)
            {
                return Grades[subject].Average();
            }
            return 0;
        }
    }

    class Program
    {
        static List<Student> students = new List<Student>();

        static void Main()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("Система учёта успеваемости студентов");
                Console.WriteLine("1 - Добавить студента");
                Console.WriteLine("2 - Добавить оценку");
                Console.WriteLine("3 - Просмотреть успеваемость");
                Console.WriteLine("4 - Выход");

                Console.Write("\nВведите команду: ");
                string command = Console.ReadLine();

                switch (command)
                {
                    case "1":
                        AddStudent();
                        break;
                    case "2":
                        AddGrade();
                        break;
                    case "3":
                        ViewPerformance();
                        break;
                    case "4":
                        return;
                    default:
                        Console.WriteLine("Некорректная команда. Попробуйте снова.");
                        break;
                }
            }
        }

        static void AddStudent()
        {
            Console.Write("Введите имя студента: ");
            string name = Console.ReadLine();
            students.Add(new Student { Name = name });
            Console.WriteLine("Студент добавлен.");
            Console.ReadKey();
        }

        static void AddGrade()
        {
            Console.Write("Введите имя студента: ");
            string name = Console.ReadLine();
            Student student = students.FirstOrDefault(s => s.Name == name);
            if (student != null)
            {
                Console.Write("Введите название предмета: ");
                string subject = Console.ReadLine();
                Console.Write("Введите оценку: ");
                if (int.TryParse(Console.ReadLine(), out int grade))
                {
                    student.AddGrade(subject, grade);
                    Console.WriteLine("Оценка добавлена.");
                }
                else
                {
                    Console.WriteLine("Некорректная оценка.");
                }
            }
            else
            {
                Console.WriteLine("Студент не найден.");
            }
            Console.ReadKey();
        }

        static void ViewPerformance()
        {
            Console.Write("Введите имя студента: ");
            string name = Console.ReadLine();
            Student student = students.FirstOrDefault(s => s.Name == name);
            if (student != null)
            {
                Console.WriteLine($"Успеваемость студента {student.Name}:");
                foreach (var subject in student.Grades)
                {
                    double average = student.GetAverageGrade(subject.Key);
                    Console.WriteLine($"{subject.Key}: {average:F2}");
                }
            }
            else
            {
                Console.WriteLine("Студент не найден.");
            }
            Console.ReadKey();
        }
    }
}


//37
using System;
using System.Collections.Generic;
using System.Linq;

namespace ContactBook
{
    class Contact
    {
        public string Name { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
    }

    class Program
    {
        static List<Contact> contacts = new List<Contact>();

        static void Main()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine("Книга контактов");
                Console.WriteLine("1 - Добавить контакт");
                Console.WriteLine("2 - Удалить контакт");
                Console.WriteLine("3 - Редактировать контакт");
                Console.WriteLine("4 - Найти контакт");
                Console.WriteLine("5 - Просмотреть все контакты");
                Console.WriteLine("6 - Выход");

                Console.Write("\nВведите команду: ");
                string command = Console.ReadLine();

                switch (command)
                {
                    case "1":
                        AddContact();
                        break;
                    case "2":
                        DeleteContact();
                        break;
                    case "3":
                        EditContact();
                        break;
                    case "4":
                        FindContact();
                        break;
                    case "5":
                        ViewContacts();
                        break;
                    case "6":
                        return;
                    default:
                        Console.WriteLine("Некорректная команда. Попробуйте снова.");
                        break;
                }
            }
        }

        static void AddContact()
        {
            Console.Write("Введите имя: ");
            string name = Console.ReadLine();
            Console.Write("Введите телефон: ");
            string phone = Console.ReadLine();
            Console.Write("Введите email: ");
            string email = Console.ReadLine();

            contacts.Add(new Contact { Name = name, Phone = phone, Email = email });
            Console.WriteLine("Контакт добавлен.");
            Console.ReadKey();
        }

        static void DeleteContact()
        {
            Console.Write("Введите имя контакта для удаления: ");
            string name = Console.ReadLine();
            var contact = contacts.FirstOrDefault(c => c.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
            if (contact != null)
            {
                contacts.Remove(contact);
                Console.WriteLine("Контакт удален.");
            }
            else
            {
                Console.WriteLine("Контакт не найден.");
            }
            Console.ReadKey();
        }

        static void EditContact()
        {
            Console.Write("Введите имя контакта для редактирования: ");
            string name = Console.ReadLine();
            var contact = contacts.FirstOrDefault(c => c.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
            if (contact != null)
            {
                Console.Write("Введите новый телефон: ");
                contact.Phone = Console.ReadLine();
                Console.Write("Введите новый email: ");
                contact.Email = Console.ReadLine();
                Console.WriteLine("Контакт обновлен.");
            }
            else
            {
                Console.WriteLine("Контакт не найден.");
            }
            Console.ReadKey();
        }

        static void FindContact()
        {
            Console.Write("Введите имя контакта для поиска: ");
            string name = Console.ReadLine();
            var contact = contacts.FirstOrDefault(c => c.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
            if (contact != null)
            {
                Console.WriteLine($"Имя: {contact.Name}");
                Console.WriteLine($"Телефон: {contact.Phone}");
                Console.WriteLine($"Email: {contact.Email}");
            }
            else
            {
                Console.WriteLine("Контакт не найден.");
            }
            Console.ReadKey();
        }

        static void ViewContacts()
        {
            Console.WriteLine("Список контактов:");
            foreach (var contact in contacts)
            {
                Console.WriteLine($"Имя: {contact.Name}, Телефон: {contact.Phone}, Email: {contact.Email}");
            }
            Console.ReadKey();
        }
    }
}


//38
using System;

namespace TicTacToe
{
    class Program
    {
        static char[] board = { '1', '2', '3', '4', '5', '6', '7', '8', '9' };
        static char currentPlayer = 'X';

        static void Main()
        {
            int turn = 0;
            bool isGameRunning = true;

            while (isGameRunning)
            {
                Console.Clear();
                DrawBoard();
                Console.WriteLine($"Игрок {currentPlayer}, ваш ход!");

                int move;
                while (!int.TryParse(Console.ReadLine(), out move) || move < 1 || move > 9 || board[move - 1] == 'X' || board[move - 1] == 'O')
                {
                    Console.WriteLine("Некорректный ход. Попробуйте снова.");
                }

                board[move - 1] = currentPlayer;
                turn++;

                if (CheckForWin())
                {
                    Console.Clear();
                    DrawBoard();
                    Console.WriteLine($"Игрок {currentPlayer} выиграл!");
                    isGameRunning = false;
                }
                else if (turn == 9)
                {
                    Console.Clear();
                    DrawBoard();
                    Console.WriteLine("Ничья!");
                    isGameRunning = false;
                }
                else
                {
                    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
                }
            }
        }

        static void DrawBoard()
        {
            Console.WriteLine(" {0} | {1} | {2} ", board[0], board[1], board[2]);
            Console.WriteLine("---|---|---");
            Console.WriteLine(" {0} | {1} | {2} ", board[3], board[4], board[5]);
            Console.WriteLine("---|---|---");
            Console.WriteLine(" {0} | {1} | {2} ", board[6], board[7], board[8]);
        }

        static bool CheckForWin()
        {
            // Проверка строк
            if (board[0] == currentPlayer && board[1] == currentPlayer && board[2] == currentPlayer) return true;
            if (board[3] == currentPlayer && board[4] == currentPlayer && board[5] == currentPlayer) return true;
            if (board[6] == currentPlayer && board[7] == currentPlayer && board[8] == currentPlayer) return true;

            // Проверка столбцов
            if (board[0] == currentPlayer && board[3] == currentPlayer && board[6] == currentPlayer) return true;
            if (board[1] == currentPlayer && board[4] == currentPlayer && board[7] == currentPlayer) return true;
            if (board[2] == currentPlayer && board[5] == currentPlayer && board[8] == currentPlayer) return true;

            // Проверка диагоналей
            if (board[0] == currentPlayer && board[4] == currentPlayer && board[8] == currentPlayer) return true;
            if (board[2] == currentPlayer && board[4] == currentPlayer && board[6] == currentPlayer) return true;

            return false;
        }
    }
}


//39
using System;

namespace BullsAndCows
{
    class Program
    {
        static void Main()
        {
            string secretNumber = GenerateSecretNumber();
            string guess;
            int bulls, cows;

            Console.WriteLine("Добро пожаловать в игру 'Быки и коровы'!");
            Console.WriteLine("Попробуйте угадать четырехзначное число.");

            do
            {
                Console.Write("Введите ваш вариант: ");
                guess = Console.ReadLine();

                if (!IsValidGuess(guess))
                {
                    Console.WriteLine("Некорректный ввод. Пожалуйста, введите четырехзначное число с неповторяющимися цифрами.");
                    continue;
                }

                CalculateBullsAndCows(secretNumber, guess, out bulls, out cows);

                Console.WriteLine($"{bulls} быков, {cows} коров.");

            } while (bulls != 4);

            Console.WriteLine("Поздравляю! Вы угадали число.");
        }

        static string GenerateSecretNumber()
        {
            Random random = new Random();
            string number;
            do
            {
                number = random.Next(1000, 10000).ToString();
            } while (!HasUniqueDigits(number));
            return number;
        }

        static bool HasUniqueDigits(string number)
        {
            return number.Length == number.Distinct().Count();
        }

        static bool IsValidGuess(string guess)
        {
            return guess.Length == 4 && int.TryParse(guess, out _) && HasUniqueDigits(guess);
        }

        static void CalculateBullsAndCows(string secretNumber, string guess, out int bulls, out int cows)
        {
            bulls = 0;
            cows = 0;

            for (int i = 0; i < secretNumber.Length; i++)
            {
                if (guess[i] == secretNumber[i])
                {
                    bulls++;
                }
                else if (secretNumber.Contains(guess[i]))
                {
                    cows++;
                }
            }
        }
    }
}



//40
using System;

namespace ATM_Simulator
{
    class Program
    {
        static decimal balance = 0.00m;

        static void Main()
        {
            bool isRunning = true;

            while (isRunning)
            {
                Console.Clear();
                Console.WriteLine("Добро пожаловать в банкомат!");
                Console.WriteLine("1. Просмотреть баланс");
                Console.WriteLine("2. Внести средства");
                Console.WriteLine("3. Снять средства");
                Console.WriteLine("4. Выйти");
                Console.Write("Выберите действие (1-4): ");

                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        ViewBalance();
                        break;
                    case "2":
                        DepositFunds();
                        break;
                    case "3":
                        WithdrawFunds();
                        break;
                    case "4":
                        isRunning = false;
                        Console.WriteLine("Спасибо, что воспользовались нашим банкоматом. До свидания!");
                        break;
                    default:
                        Console.WriteLine("Неверный выбор. Попробуйте снова.");
                        break;
                }
            }
        }

        static void ViewBalance()
        {
            Console.Clear();
            Console.WriteLine($"Ваш текущий баланс: {balance:C}");
            Console.WriteLine("Нажмите любую клавишу, чтобы вернуться в главное меню.");
            Console.ReadKey();
        }

        static void DepositFunds()
        {
            Console.Clear();
            Console.Write("Введите сумму для внесения: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal depositAmount) && depositAmount > 0)
            {
                balance += depositAmount;
                Console.WriteLine($"Внесено: {depositAmount:C}");
            }
            else
            {
                Console.WriteLine("Некорректная сумма. Попробуйте снова.");
            }
            Console.WriteLine("Нажмите любую клавишу, чтобы вернуться в главное меню.");
            Console.ReadKey();
        }

        static void WithdrawFunds()
        {
            Console.Clear();
            Console.Write("Введите сумму для снятия: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal withdrawAmount) && withdrawAmount > 0)
            {
                if (withdrawAmount <= balance)
                {
                    balance -= withdrawAmount;
                    Console.WriteLine($"Снято: {withdrawAmount:C}");
                }
                else
                {
                    Console.WriteLine("Недостаточно средств на счете.");
                }
            }
            else
            {
                Console.WriteLine("Некорректная сумма. Попробуйте снова.");
            }
            Console.WriteLine("Нажмите любую клавишу, чтобы вернуться в главное меню.");
            Console.ReadKey();
        }
    }
}
